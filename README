# Структура проекта FastAPI

Теперь ваш проект разделен на следующие файлы:

```
catalog_api/
├── main.py # Основное приложение и точка входа
├── database.py # Настройка базы данных и dependency
├── models.py # SQLAlchemy модели базы данных
├── schemas.py # Pydantic схемы для валидации
├── utils.py # Вспомогательные функции
└── routers/ # Роутеры для группировки эндпоинтов
    ├── __init__.py
    ├── buildings.py # Эндпоинты для работы со зданиями
    ├── categories.py # Эндпоинты для работы с категориями
    ├── companies.py # Эндпоинты для работы с компаниями
    └── test_data.py # Генерация тестовых данных
```

## Описание файлов

### `main.py`
- Основное приложение FastAPI
- Настройка CORS
- Подключение роутеров
- Корневые эндпоинты (/, /stats/, /health/)

### `database.py`
- Конфигурация SQLAlchemy
- Создание engine и session
- Dependency функция `get_db()`

### `models.py`
- SQLAlchemy модели (Building, Category, Company)
- Определение связей между таблицами
- Таблица ассоциаций для many-to-many связи

### `schemas.py`
- Pydantic модели для валидации входных и выходных данных
- Create, Update, Response схемы для каждой сущности

### `utils.py`
- Вспомогательные функции
- Работа с иерархией категорий
- Расчет расстояний по координатам

### `routers/`
Роутеры разделены по функциональности:
- `buildings.py` - CRUD операции со зданиями
- `categories.py` - CRUD операции с категориями
- `companies.py` - CRUD операции с компаниями + поиск
- `test_data.py` - Генерация тестовых данных

## Как запустить

```bash
# Установите зависимости
pip install fastapi uvicorn sqlalchemy pydantic

# Запустите сервер
python main.py
```

## Основные изменения

1. Модульность: Код разделен на логические модули
2. Роутеры: Эндпоинты сгруппированы по функциональности
3. Относительные импорты: Использованы для внутренних модулей
4. Лучшая читаемость: Каждый файл отвечает за свою область ответственности

Эта структура упрощает поддержку, тестирование и расширение API.